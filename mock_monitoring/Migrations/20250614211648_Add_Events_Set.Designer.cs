// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mock_monitoring.Models;

#nullable disable

namespace mock_monitoring.Migrations
{
    [DbContext(typeof(MonitoringDbContext))]
    [Migration("20250614211648_Add_Events_Set")]
    partial class Add_Events_Set
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("mock_monitoring.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("End")
                        .HasColumnType("int");

                    b.Property<int>("Level_1")
                        .HasColumnType("int");

                    b.Property<int>("Level_2")
                        .HasColumnType("int");

                    b.Property<int>("Level_3")
                        .HasColumnType("int");

                    b.Property<int>("Quality")
                        .HasColumnType("int");

                    b.Property<int>("SensorId")
                        .HasColumnType("int")
                        .HasColumnName("SensorId");

                    b.Property<int>("SensorLogId")
                        .HasColumnType("int")
                        .HasColumnName("SensorLogId");

                    b.Property<int>("Start")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Event", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("mock_monitoring.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<sbyte>("Alarmen")
                        .HasColumnType("tinyint(4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Sample_Period")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sensor", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("mock_monitoring.Models.SensorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enable")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("High")
                        .HasColumnType("float");

                    b.Property<float>("Low")
                        .HasColumnType("float");

                    b.Property<sbyte>("Quality")
                        .HasColumnType("tinyint(4)");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<sbyte>("Status")
                        .HasColumnType("tinyint(4)");

                    b.Property<float>("Temp")
                        .HasColumnType("float");

                    b.Property<int>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SensorLog");
                });

            modelBuilder.Entity("mock_monitoring.Lib.Events.OutOfRangeEvent", b =>
                {
                    b.HasBaseType("mock_monitoring.Models.Event");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("mock_monitoring.Models.TemperatureSensor", b =>
                {
                    b.HasBaseType("mock_monitoring.Models.Sensor");

                    b.HasDiscriminator().HasValue(104);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Alarmen = (sbyte)0,
                            CreatedAt = new DateTime(2025, 6, 14, 21, 16, 48, 293, DateTimeKind.Utc).AddTicks(6101),
                            Enable = true,
                            MacAddress = "00:11:22:33:44:55",
                            Name = "Mock Sensor 1",
                            ProfileId = 1,
                            Sample_Period = 900,
                            Type = 104
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
